name: Upload to s3 QA and Dev
run-name: Upload to s3 QA and Dev

on:
  workflow_call:
    secrets:
      CENTRAL_ACCOUNT_ID:
        required: true
      S3_BUCKET_APPS:
        required: true
    inputs:
      aws-secret-central:
        description: "secret in central that include all the account ids"
        required: true
        type: string
      kind:
        description: "choose player or plugin - example: 'plugin'"
        required: true
        type: string
      prod:
        description: "prod or not boolean - example: 'false/true'"
        required: true
        type: string

env:
  PLAYERS: "ovp tv"

jobs:
  get-package-details:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node-version: [ 17.x ]
    runs-on: ${{ matrix.os }}
    outputs:
      name: ${{ steps.name.outputs.name }}
      version: ${{ steps.version.outputs.version }}
      full_npm_name: ${{ steps.full_npm_name.outputs.full_npm_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Node.js version ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Git
        run: |
          git config --global user.email "ovp.cp@kaltura.com"
          git config --global user.name "ovp-github-actions"

      - name: Yarn install
        run: yarn install

      - name: Yarn run release
        run: |
          if [ "${{ inputs.prod }}" = "true" ]; then
            yarn run release
          else
            yarn run release --prerelease canary --skip.commit=true --skip.tag=true
          fi

      - name: Update version in package.json file
        run: |
          sha=$(echo "${GITHUB_SHA::7}")
          currentVersion=$(npx -c 'echo "$npm_package_version"')
          commitNumberAfterTag=$(git rev-list  `git rev-list --tags --no-walk --max-count=1`..HEAD --count)
          newVersion=$(echo ${currentVersion} | sed -e "s/canary\.[[:digit:]]/canary.${commitNumberAfterTag}-${sha}/g")
          echo "New version ${newVersion}"
          sed -iE "s/${currentVersion}/${newVersion}/g" package.json
          sed -iE "s/${currentVersion}/${newVersion}/g" CHANGELOG.md
          rm package.jsonE
          rm CHANGELOG.mdE

      - name: Output name
        id: name
        run: |
          packageName=$(npx -c 'echo "$npm_package_name"')
          shortName=$(echo "${packageName}"| sed -e 's/@playkit-js\///g' -e 's/playkit-js-//g')
          name="playkit-${shortName}"
          echo $name
          echo "name=${name}" >> $GITHUB_OUTPUT

      - name: Output version
        id: version
        run: |
          version=$(npx -c 'echo "$npm_package_version"')
          echo $version
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Output full package name and version
        id: full_npm_name
        run: |
          packageName=$(npx -c 'echo "$npm_package_name"')
          currentVersion=$(npx -c 'echo "$npm_package_version"')
          full_npm_name="${packageName}@${currentVersion}"
          echo $full_npm_name
          echo "full_npm_name=${full_npm_name}" >> $GITHUB_OUTPUT

  get-accounts:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    outputs:
      accounts: ${{ steps.accounts.outputs.accounts }}
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.CENTRAL_ACCOUNT_ID }}:role/dor-test-oidc-github-actions
          role-session-name: githubAction-${{ github.run_id }}
          aws-region: "us-east-1"

      - name: Get environments list
        id: accounts
        run: |
          aws_envs=$(aws secretsmanager get-secret-value --secret-id  arn:aws:secretsmanager:us-east-1:${{ secrets.CENTRAL_ACCOUNT_ID }}:secret:dor-test-github-actions-Q3jQq1 --query SecretString --output text | jq -c)
          accounts=$(echo $aws_envs | jq -c '.[]' | while read i; do jq -n --arg env "$(jq -r '.env' <<< "$i")" '{"env": $env, "os": "ubuntu-latest", "node-version": "17.x"}' ; done | jq -s -c)
          echo $accounts
          echo "accounts={\"include\":$accounts}" >> $GITHUB_OUTPUT

  upload-to-s3:
    needs: [get-package-details, get-accounts]
    strategy:
      matrix: ${{fromJSON(needs.get-accounts.outputs.accounts)}}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Node.js version ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Download plugin package
        if: ${{ inputs.kind == 'plugin' }}
        run: |
          echo "${{ needs.get-package-details.outputs.full_npm_name }}"

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.CENTRAL_ACCOUNT_ID }}:role/dor-test-oidc-github-actions
          role-session-name: githubAction
          aws-region: "us-east-1"

      - name: Get specific account details
        id: specific_account
        run: |
          aws_envs=$(aws secretsmanager get-secret-value --secret-id  arn:aws:secretsmanager:us-east-1:${{ secrets.CENTRAL_ACCOUNT_ID }}:secret:dor-test-github-actions-Q3jQq1 --query SecretString --output text | jq -c)
          echo $aws_envs | jq -c '.[]' | while read i; do account_id=$(jq -r '.account_id' <<< "$i"); echo "::add-mask::$account_id"; done
          specific_account=$(echo $aws_envs | jq -c '.[] | select(.env | contains("${{ matrix.env }}"))')
          echo "specific_account=$specific_account" >> $GITHUB_OUTPUT

      - name: Get account id
        id: account_id
        run: |
          account_id=$(echo '${{ steps.specific_account.outputs.specific_account }}' | jq -r '.account_id')
          echo "account_id=$account_id" >> $GITHUB_OUTPUT

      - name: Get region
        id: region
        run: |
          region=$(echo '${{ steps.specific_account.outputs.specific_account }}' | jq -r '.region')
          echo "region=$region" >> $GITHUB_OUTPUT

      - name: Upload plugin to s3 apps
        if: ${{ inputs.kind == 'plugin' }}
        run: |
          # Assume role
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
                      $(aws sts assume-role \
                      --role-arn arn:aws:iam::${{ steps.account_id.outputs.account_id }}:role/${{ matrix.env }}-kalt-ovp-apps-role \
                      --role-session-name ${{ matrix.env }} \
                      --region ${{ steps.region.outputs.region }} \
                      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
                      --output text))

          s3Path="s3://${{ matrix.env }}-${{ secrets.S3_BUCKET_APPS }}/bundler/playkit/modules/${{ needs.get-package-details.outputs.name }}/${{ needs.get-package-details.outputs.version }}"
          echo "${s3Path}"

      - name: Upload player to s3 apps by assuming role
        if: ${{ inputs.kind == 'player' }}
        run: |
          # Assume role
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
                      $(aws sts assume-role \
                      --role-arn arn:aws:iam::${{ steps.account_id.outputs.account_id }}:role/${{ matrix.env }}-kalt-ovp-apps-role \
                      --role-session-name ${{ matrix.env }} \
                      --region ${{ steps.region.outputs.region }} \
                      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
                      --output text))

          for player in ${{ env.PLAYERS }}; do
            s3Path="s3://${{ matrix.env }}-${{ secrets.S3_BUCKET_APPS }}/bundler/playkit/modules/kaltura-${player}-player/${{ needs.get-package-details.outputs.version }}"
            echo "${s3Path}"
          done

